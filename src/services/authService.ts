// src/hooks/useAuth.ts (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

import { useAuthStore } from "@/store/authStore";
import {
  useCurrentUser,
  useLogin,
  useLogout,
  useRegister,
} from "@/services/authService";
import { UserRole } from "@/types";
import { useEffect } from "react";
import { toast } from "react-toastify";

export function useAuth() {
  const { user, setUser, clearUser } = useAuthStore();

  // React Query —Ö—É–∫–∏
  const {
    data: currentUser,
    isLoading: isCheckingAuth,
    error: authError,
  } = useCurrentUser();
  const loginMutation = useLogin();
  const logoutMutation = useLogout();
  const registerMutation = useRegister();

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Zustand —Å React Query
  useEffect(() => {
    if (currentUser && !("notActivated" in currentUser)) {
      setUser(currentUser);
    } else {
      clearUser();
    }
  }, [currentUser, setUser, clearUser]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const login = async (email: string, password: string) => {
    try {
      const user = await loginMutation.mutateAsync({ email, password });
      setUser(user);
      return user;
    } catch (error) {
      clearUser();
      throw error;
    }
  };

  const logout = async () => {
    try {
      await logoutMutation.mutateAsync();
      clearUser();
      toast.info("üëã –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", {
        position: "top-right",
        autoClose: 3000,
      });
    } catch (error) {
      // –î–∞–∂–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      clearUser();
      toast.warning("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ, –Ω–æ —Å–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞", {
        position: "top-right",
        autoClose: 4000,
      });
      throw error;
    }
  };

  const register = async (
    name: string,
    email: string,
    password: string,
    role: UserRole,
    specialization?: string,
    phone?: string
  ) => {
    try {
      const result = await registerMutation.mutateAsync({
        name,
        email,
        password,
        role,
        specialization,
        phone,
      });

      return result;
    } catch (error: any) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const message = error?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";

      if (
        message.includes("—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç") ||
        message.includes("already exists")
      ) {
        toast.error("üìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", {
          position: "top-center",
          autoClose: 5000,
        });
      } else if (message.includes("–ø–∞—Ä–æ–ª—å") || message.includes("password")) {
        toast.error("üîí –û—à–∏–±–∫–∞ —Å –ø–∞—Ä–æ–ª–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é", {
          position: "top-center",
          autoClose: 5000,
        });
      } else if (message.includes("email") || message.includes("Email")) {
        toast.error("üìß –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞", {
          position: "top-center",
          autoClose: 5000,
        });
      } else {
        toast.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${message}`, {
          position: "top-center",
          autoClose: 5000,
        });
      }

      throw error;
    }
  };

  const clearError = () => {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    if (authError) {
      toast.error("üîê –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ", {
        position: "top-center",
        autoClose: 5000,
      });
    }
  }, [authError]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  const isSuper = user?.role === UserRole.SUPER_ADMIN;
  const isManager = user?.role === UserRole.MANAGER;
  const isTechnician = user?.role === UserRole.TECHNICIAN;
  const isRequester = user?.role === UserRole.REQUESTER;

  // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  const canManageUsers = isSuper || isManager;
  const canManageRequests = isSuper || isManager;
  const canAssignTechnicians = isSuper || isManager;
  const canViewAllRequests = isSuper || isManager;
  const canCreateRequests = isSuper || isManager || isRequester;
  const canUpdateRequestStatus = isSuper || isManager || isTechnician;

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    user,
    loading:
      isCheckingAuth ||
      loginMutation.isPending ||
      logoutMutation.isPending ||
      registerMutation.isPending,
    error:
      authError?.message ||
      loginMutation.error?.message ||
      logoutMutation.error?.message ||
      registerMutation.error?.message ||
      null,

    // –î–µ–π—Å—Ç–≤–∏—è
    login,
    logout,
    register,
    clearError,

    // –°—Ç–∞—Ç—É—Å—ã –º—É—Ç–∞—Ü–∏–π
    isLoggingIn: loginMutation.isPending,
    isLoggingOut: logoutMutation.isPending,
    isRegistering: registerMutation.isPending,

    // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
    isSuper,
    isManager,
    isTechnician,
    isRequester,

    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    canManageUsers,
    canManageRequests,
    canAssignTechnicians,
    canViewAllRequests,
    canCreateRequests,
    canUpdateRequestStatus,
  };
}

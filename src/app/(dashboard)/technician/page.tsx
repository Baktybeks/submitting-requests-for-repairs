// src/app/(dashboard)/technician/page.tsx

"use client";

import React, { useState } from "react";
import { useAuth } from "@/hooks/useAuth";
import {
  useRequests,
  useUpdateRequest,
  useRejectRequestByTechnician,
} from "@/services/maintenanceService";
import { RequestsList } from "@/components/requests/RequestsList";
import { DashboardStats } from "@/components/dashboard/DashboardStats";
import {
  MaintenanceRequest,
  RequestStatus,
  getStatusLabel,
  getStatusColor,
  getPriorityLabel,
  getPriorityColor,
  getCategoryLabel,
} from "@/types";
import { formatLocalDateTime } from "@/utils/dateUtils";
import { toast } from "react-toastify";
import {
  Wrench,
  Clock,
  CheckCircle,
  BarChart3,
  ClipboardList,
  User,
  Settings,
  AlertTriangle,
  Play,
  Pause,
  MapPin,
  Square,
  UserCheck,
  UserX,
  CheckSquare,
} from "lucide-react";

export default function TechnicianPage() {
  const { user } = useAuth();
  const [activeTab, setActiveTab] = useState<
    "dashboard" | "assigned" | "all" | "profile"
  >("dashboard");
  const updateRequestMutation = useUpdateRequest();
  const rejectRequestMutation = useRejectRequestByTechnician();

  // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∞
  const { data: assignedRequests = [], isLoading: assignedLoading } =
    useRequests({
      assignedTechnicianId: user?.$id,
    });

  const { data: allRequests = [], isLoading: allLoading } = useRequests();

  if (!user) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
      </div>
    );
  }

  const handleStatusUpdate = async (
    request: MaintenanceRequest,
    newStatus: RequestStatus
  ) => {
    try {
      const updates: any = { status: newStatus };

      if (newStatus === RequestStatus.COMPLETED) {
        updates.actualCompletionDate = new Date().toISOString();
      }

      await updateRequestMutation.mutateAsync({
        id: request.$id,
        data: updates,
        userId: user.$id,
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
      if (newStatus === RequestStatus.IN_PROGRESS) {
        toast.success(`‚úÖ –ó–∞—è–≤–∫–∞ "${request.title}" –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É`, {
          position: "top-right",
          autoClose: 3000,
        });
      } else if (newStatus === RequestStatus.COMPLETED) {
        toast.success(`üéâ –ó–∞—è–≤–∫–∞ "${request.title}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`, {
          position: "top-right",
          autoClose: 4000,
        });
      } else {
        toast.success(
          `‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${getStatusLabel(newStatus)}"`,
          {
            position: "top-right",
            autoClose: 3000,
          }
        );
      }
    } catch (error: any) {
      toast.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`, {
        position: "top-center",
        autoClose: 5000,
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç –∑–∞—è–≤–∫–∏
  const handleRejectRequest = async (request: MaintenanceRequest) => {
    if (
      !confirm(
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞—è–≤–∫–∏ "${request.title}"?`
      )
    ) {
      return;
    }

    try {
      await rejectRequestMutation.mutateAsync({
        requestId: request.$id,
        technicianId: user.$id,
      });

      toast.success(
        `‚úÖ –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞—è–≤–∫–∏ "${request.title}". –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞.`,
        {
          position: "top-right",
          autoClose: 4000,
        }
      );
    } catch (error: any) {
      toast.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç –∑–∞—è–≤–∫–∏: ${error.message}`, {
        position: "top-center",
        autoClose: 5000,
      });
    }
  };

  const handleRequestClick = (request: MaintenanceRequest) => {
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞—è–≤–∫–∏
    console.log("–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É:", request);
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
  const assignedStats = {
    total: assignedRequests.length,
    awaitingAcceptance: assignedRequests.filter(
      (r) =>
        r.status === RequestStatus.NEW && r.assignedTechnicianId === user.$id
    ).length,
    inProgress: assignedRequests.filter(
      (r) => r.status === RequestStatus.IN_PROGRESS
    ).length,
    completed: assignedRequests.filter(
      (r) => r.status === RequestStatus.COMPLETED
    ).length,
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">
                –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ —Ç–µ—Ö–Ω–∏–∫–∞
              </h1>
              <p className="text-sm text-gray-600 mt-1">
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name}!
                {user.specialization && (
                  <span className="ml-2 text-indigo-600">
                    ‚Ä¢ {user.specialization}
                  </span>
                )}
              </p>
            </div>
            <div className="flex items-center space-x-3">
              <div className="text-right">
                <p className="text-sm font-medium text-gray-900">{user.name}</p>
                <p className="text-xs text-gray-500">–¢–µ—Ö–Ω–∏–∫</p>
              </div>
              <div className="h-10 w-10 bg-green-100 rounded-full flex items-center justify-center">
                <Wrench className="h-6 w-6 text-green-600" />
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-gray-900">
                {assignedStats.total}
              </div>
              <div className="text-sm text-gray-600">–í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600">
                {assignedStats.awaitingAcceptance}
              </div>
              <div className="text-sm text-gray-600">–û–∂–∏–¥–∞—é—Ç –ø—Ä–∏–Ω—è—Ç–∏—è</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">
                {assignedStats.inProgress}
              </div>
              <div className="text-sm text-gray-600">–í —Ä–∞–±–æ—Ç–µ</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">
                {assignedStats.completed}
              </div>
              <div className="text-sm text-gray-600">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
            </div>
          </div>
        </div>
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <nav className="flex space-x-8">
            <button
              onClick={() => setActiveTab("dashboard")}
              className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                activeTab === "dashboard"
                  ? "border-indigo-500 text-indigo-600"
                  : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
              }`}
            >
              <BarChart3 className="inline h-4 w-4 mr-2" />
              –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </button>
            <button
              onClick={() => setActiveTab("assigned")}
              className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                activeTab === "assigned"
                  ? "border-indigo-500 text-indigo-600"
                  : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
              }`}
            >
              <ClipboardList className="inline h-4 w-4 mr-2" />
              –ú–æ–∏ –∑–∞—è–≤–∫–∏ ({assignedStats.total})
              {assignedStats.awaitingAcceptance > 0 && (
                <span className="ml-1 bg-orange-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center inline-flex">
                  {assignedStats.awaitingAcceptance}
                </span>
              )}
            </button>
            <button
              onClick={() => setActiveTab("all")}
              className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                activeTab === "all"
                  ? "border-indigo-500 text-indigo-600"
                  : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
              }`}
            >
              <ClipboardList className="inline h-4 w-4 mr-2" />
              –í—Å–µ –∑–∞—è–≤–∫–∏
            </button>
            <button
              onClick={() => setActiveTab("profile")}
              className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                activeTab === "profile"
                  ? "border-indigo-500 text-indigo-600"
                  : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
              }`}
            >
              <Settings className="inline h-4 w-4 mr-2" />
              –ü—Ä–æ—Ñ–∏–ª—å
            </button>
          </nav>
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === "dashboard" && (
          <div className="space-y-8">
            <div>
              <h2 className="text-xl font-semibold text-gray-900 mb-4">
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–∏—Ö –∑–∞—è–≤–æ–∫
              </h2>
              <DashboardStats filters={{ assignedTechnicianId: user.$id }} />
            </div>
          </div>
        )}

        {activeTab === "assigned" && (
          <div>
            {assignedLoading ? (
              <div className="flex items-center justify-center py-12">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
                <span className="ml-3 text-gray-600">
                  –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫...
                </span>
              </div>
            ) : (
              <div className="space-y-6">
                <div className="flex justify-between items-center">
                  <h2 className="text-xl font-semibold text-gray-900">
                    –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –º–Ω–µ –∑–∞—è–≤–∫–∏
                  </h2>
                  {assignedStats.awaitingAcceptance > 0 && (
                    <div className="bg-orange-100 border border-orange-200 rounded-lg px-4 py-2">
                      <span className="text-orange-800 text-sm font-medium">
                        {assignedStats.awaitingAcceptance} –∑–∞—è–≤–æ–∫ –æ–∂–∏–¥–∞—é—Ç –≤–∞—à–µ–≥–æ
                        –ø—Ä–∏–Ω—è—Ç–∏—è
                      </span>
                    </div>
                  )}
                </div>

                {assignedRequests.length === 0 ? (
                  <div className="text-center py-12">
                    <Wrench className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                    <h3 className="text-lg font-medium text-gray-900 mb-2">
                      –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
                    </h3>
                    <p className="text-gray-600">
                      –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞–º –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    </p>
                  </div>
                ) : (
                  <div className="grid gap-4">
                    {assignedRequests.map((request) => (
                      <TechnicianRequestCard
                        key={request.$id}
                        request={request}
                        onStatusUpdate={handleStatusUpdate}
                        onRejectRequest={handleRejectRequest}
                        onClick={() => handleRequestClick(request)}
                        isUpdating={
                          updateRequestMutation.isPending ||
                          rejectRequestMutation.isPending
                        }
                      />
                    ))}
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {activeTab === "all" && (
          <div>
            <RequestsList
              onRequestClick={handleRequestClick}
              showFilters={true}
            />
          </div>
        )}

        {activeTab === "profile" && (
          <div className="max-w-2xl">
            <TechnicianProfile user={user} />
          </div>
        )}
      </div>
    </div>
  );
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∞
interface TechnicianRequestCardProps {
  request: MaintenanceRequest;
  onStatusUpdate: (request: MaintenanceRequest, status: RequestStatus) => void;
  onRejectRequest: (request: MaintenanceRequest) => void;
  onClick?: () => void;
  isUpdating?: boolean;
}

function TechnicianRequestCard({
  request,
  onStatusUpdate,
  onRejectRequest,
  onClick,
  isUpdating,
}: TechnicianRequestCardProps) {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
  const getAvailableActions = (status: RequestStatus) => {
    switch (status) {
      case RequestStatus.NEW:
        return [
          {
            label: "–ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
            icon: UserCheck,
            color: "bg-green-600 hover:bg-green-700",
            action: () => onStatusUpdate(request, RequestStatus.IN_PROGRESS),
          },
          {
            label: "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è",
            icon: UserX,
            color: "bg-red-600 hover:bg-red-700",
            action: () => onRejectRequest(request),
            variant: "secondary" as const,
          },
        ];
      case RequestStatus.IN_PROGRESS:
        return [
          {
            label: "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            icon: CheckSquare,
            color: "bg-blue-600 hover:bg-blue-700",
            action: () => onStatusUpdate(request, RequestStatus.COMPLETED),
          },
        ];
      default:
        return [];
    }
  };

  const actions = getAvailableActions(request.status);

  return (
    <div
      className={`bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow ${
        onClick ? "cursor-pointer" : ""
      } ${
        request.status === RequestStatus.NEW
          ? "border-l-4 border-l-orange-500"
          : ""
      }`}
      onClick={onClick}
    >
      <div className="flex items-start justify-between">
        <div className="flex-1 min-w-0">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å */}
          <div className="flex items-start justify-between mb-2">
            <h3 className="text-lg font-medium text-gray-900 truncate pr-4">
              {request.title}
            </h3>
            <div className="flex items-center gap-2 flex-shrink-0">
              <span
                className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${getStatusColor(
                  request.status
                )}`}
              >
                {getStatusLabel(request.status)}
              </span>
              <span
                className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${getPriorityColor(
                  request.priority
                )}`}
              >
                {getPriorityLabel(request.priority)}
              </span>
            </div>
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <p className="text-gray-600 text-sm mb-3 line-clamp-2">
            {request.description}
          </p>

          {/* –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="flex flex-wrap items-center gap-4 text-sm text-gray-500 mb-3">
            <div className="flex items-center">
              <MapPin className="h-4 w-4 mr-1" />
              {request.location}
            </div>
            <div className="flex items-center">
              <Clock className="h-4 w-4 mr-1" />
              {formatLocalDateTime(request.$createdAt)}
            </div>
            <div className="flex items-center">
              <AlertTriangle className="h-4 w-4 mr-1" />
              {getCategoryLabel(request.category)}
            </div>
          </div>

          {/* –°—Ç–∞—Ç—É—Å –¥–ª—è NEW –∑–∞—è–≤–æ–∫ */}
          {request.status === RequestStatus.NEW && (
            <div className="bg-orange-50 border border-orange-200 rounded-md p-3 mb-3">
              <div className="flex items-center">
                <Clock className="h-4 w-4 text-orange-600 mr-2" />
                <span className="text-sm text-orange-800 font-medium">
                  –ó–∞—è–≤–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É
                </span>
              </div>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          {actions.length > 0 && (
            <div className="flex flex-wrap gap-2">
              {actions.map((action, index) => (
                <button
                  key={index}
                  onClick={(e) => {
                    e.stopPropagation();
                    action.action();
                  }}
                  disabled={isUpdating}
                  className={`inline-flex items-center px-4 py-2 text-sm font-medium text-white rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed ${
                    action.variant === "secondary"
                      ? "bg-gray-600 hover:bg-gray-700"
                      : action.color
                  }`}
                >
                  {isUpdating ? (
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  ) : (
                    <action.icon className="h-4 w-4 mr-2" />
                  )}
                  {action.label}
                </button>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ—Ö–Ω–∏–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
interface TechnicianProfileProps {
  user: any;
}

function TechnicianProfile({ user }: TechnicianProfileProps) {
  return (
    <div className="bg-white shadow rounded-lg">
      <div className="px-6 py-4 border-b border-gray-200">
        <h3 className="text-lg font-medium text-gray-900">–ü—Ä–æ—Ñ–∏–ª—å —Ç–µ—Ö–Ω–∏–∫–∞</h3>
        <p className="text-sm text-gray-600 mt-1">
          –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        </p>
      </div>

      <div className="px-6 py-4 space-y-6">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="flex items-center space-x-4">
          <div className="h-16 w-16 bg-green-100 rounded-full flex items-center justify-center">
            <Wrench className="h-8 w-8 text-green-600" />
          </div>
          <div>
            <h4 className="text-lg font-medium text-gray-900">{user.name}</h4>
            <p className="text-sm text-gray-600">–¢–µ—Ö–Ω–∏–∫</p>
            {user.specialization && (
              <p className="text-sm text-indigo-600 font-medium">
                {user.specialization}
              </p>
            )}
            <div className="flex items-center mt-2">
              <span
                className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                  user.isActive
                    ? "bg-green-100 text-green-800"
                    : "bg-yellow-100 text-yellow-800"
                }`}
              >
                {user.isActive ? "–ê–∫—Ç–∏–≤–Ω—ã–π" : "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"}
              </span>
            </div>
          </div>
        </div>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–æ–≤ */}
        <div className="border-t border-gray-200 pt-6">
          <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
            <h4 className="text-sm font-medium text-blue-800 mb-2">
              –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–æ–≤
            </h4>
            <ul className="text-sm text-blue-700 space-y-1">
              <li>
                ‚Ä¢ –ù–æ–≤—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Ç—Ä–µ–±—É—é—Ç –≤–∞—à–µ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É
              </li>
              <li>
                ‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –µ—ë –≤—ã–ø–æ–ª–Ω–∏—Ç—å
              </li>
              <li>‚Ä¢ –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å "–í —Ä–∞–±–æ—Ç–µ"</li>
              <li>‚Ä¢ –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç –æ—Ç–º–µ—á–∞–π—Ç–µ –∑–∞—è–≤–∫—É –∫–∞–∫ "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"</li>
              <li>‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç</li>
            </ul>
          </div>
        </div>

        {/* –°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫ */}
        <div className="border-t border-gray-200 pt-6">
          <h4 className="text-sm font-medium text-gray-900 mb-4">
            –†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å
          </h4>
          <div className="space-y-3">
            <div className="flex items-center justify-between p-3 bg-orange-50 border border-orange-200 rounded-md">
              <div className="flex items-center">
                <Clock className="h-5 w-5 text-orange-600 mr-3" />
                <div>
                  <p className="text-sm font-medium text-orange-800">
                    –ù–æ–≤–∞—è (–Ω–∞–∑–Ω–∞—á–µ–Ω–∞)
                  </p>
                  <p className="text-xs text-orange-600">
                    –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É –∏–ª–∏ –æ—Ç–∫–∞–∑–∞
                  </p>
                </div>
              </div>
              <div className="flex gap-2">
                <button className="text-xs bg-green-600 text-white px-3 py-1 rounded-md">
                  –ü—Ä–∏–Ω—è—Ç—å
                </button>
                <button className="text-xs bg-red-600 text-white px-3 py-1 rounded-md">
                  –û—Ç–∫–∞–∑–∞—Ç—å—Å—è
                </button>
              </div>
            </div>

            <div className="flex items-center justify-between p-3 bg-blue-50 border border-blue-200 rounded-md">
              <div className="flex items-center">
                <Play className="h-5 w-5 text-blue-600 mr-3" />
                <div>
                  <p className="text-sm font-medium text-blue-800">–í —Ä–∞–±–æ—Ç–µ</p>
                  <p className="text-xs text-blue-600">–†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è</p>
                </div>
              </div>
              <button className="text-xs bg-blue-600 text-white px-3 py-1 rounded-md">
                –ó–∞–≤–µ—Ä—à–∏—Ç—å
              </button>
            </div>

            <div className="flex items-center p-3 bg-green-50 border border-green-200 rounded-md">
              <CheckCircle className="h-5 w-5 text-green-600 mr-3" />
              <div>
                <p className="text-sm font-medium text-green-800">–ó–∞–≤–µ—Ä—à–µ–Ω–∞</p>
                <p className="text-xs text-green-600">
                  –†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ */}
        <div className="border-t border-gray-200 pt-6">
          <h4 className="text-sm font-medium text-gray-900 mb-4">
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
          </h4>
          <div className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span className="text-gray-600">ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</span>
              <span className="text-gray-900 font-mono text-xs">
                {user.$id}
              </span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</span>
              <span className="text-gray-900">
                {new Date(user.$createdAt).toLocaleDateString("ru-RU")}
              </span>
            </div>
            {user.specialization && (
              <div className="flex justify-between">
                <span className="text-gray-600">–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</span>
                <span className="text-gray-900">{user.specialization}</span>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

// scripts/testConnection.js
const { Client, Databases } = require("node-appwrite");
require("dotenv").config({ path: ".env.local" });

const testConnection = async () => {
  try {
    console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Appwrite...\n");

    const client = new Client();
    client
      .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
      .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
      .setKey(process.env.APPWRITE_API_KEY);

    const databases = new Databases(client);

    console.log("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
    const databasesList = await databases.list();
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!");
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: ${databasesList.total}`);

    const targetDb = databasesList.databases.find(
      (db) => db.$id === process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID
    );

    if (targetDb) {
      console.log(
        `‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: "${targetDb.name}" (${targetDb.$id})`
      );

      const collections = await databases.listCollections(targetDb.$id);
      console.log(`üìã –ö–æ–ª–ª–µ–∫—Ü–∏–π –≤ –±–∞–∑–µ: ${collections.total}`);

      if (collections.total > 0) {
        console.log("\nüìö –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π:");
        collections.collections.forEach((collection) => {
          console.log(`  - ${collection.name} (${collection.$id})`);
        });
      }
    } else {
      console.log("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
      console.log(
        "üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ NEXT_PUBLIC_APPWRITE_DATABASE_ID –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
      );
    }

    console.log("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error.message);
    console.log("\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
    console.log("- –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á");
    console.log("- –ù–µ–≤–µ—Ä–Ω—ã–π Project ID");
    console.log("- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É API –∫–ª—é—á–∞");
    console.log("- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é");

    console.log("\nüìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:");
    console.log(
      `  APPWRITE_ENDPOINT: ${process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT}`
    );
    console.log(`  PROJECT_ID: ${process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID}`);
    console.log(
      `  DATABASE_ID: ${process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID}`
    );
    console.log(
      `  API_KEY: ${process.env.APPWRITE_API_KEY ? "***—Å–∫—Ä—ã—Ç***" : "–ù–ï –ó–ê–î–ê–ù"}`
    );
  }
};

testConnection();
